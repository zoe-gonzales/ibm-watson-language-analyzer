{"version":3,"sources":["components/Title/index.js","components/ResultsGrid/index.js","components/Directions/index.js","components/TextInput/index.js","components/DropDownSelect/index.js","components/SubmitButton/index.js","components/Form/FormAction.js","utils/API.js","components/Form/index.js","components/Home/ResultsAction.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","children","Grid","type","text","results","className","role","aria-label","Anger","Disgust","Fear","Joy","Sadness","map","res","key","id","Text","Relevance","Count","Label","substr","Score","Directions","dirs","dir","TextInput","name","placeholder","onChange","htmlFor","DropDown","options","opt","value","SubmitButton","onClick","FormAction","cb","useState","setText","select","setSelect","handleInputChange","e","persist","target","handleSelectChange","handleFormSubmit","preventDefault","request","axios","post","Form","API","then","stats","data","Results","forEach","ReactDOM","render","apiResults","document","getElementById","catch","err","console","log","ResultsAction","setResults","setType","useEffect","Home","App","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.23f7094f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = props => {\n    return <h3>{props.children}</h3>\n}\n\nexport default Title;","import React from 'react';\nimport Title from '../Title';\n\nconst Grid = ({ type, text, results }) => {\n    const generateRows = () => {\n        if (type === \"Emotion\") {\n            return (\n                <div>\n                    {/* User Input */}\n                    <div className=\"row\">\n                        <div className=\"col s4\">Text</div>\n                        <div className=\"col s8\">{text}</div>\n                    </div>\n                    {/* Headings */}\n                    <div className=\"row\">\n                        <div className=\"col s4\">{type}s</div>\n                        <div className=\"col s4\">{type}</div>\n                        <div className=\"col s4\">Score</div>\n                    </div>\n                    {/* Results */}\n                    <div className=\"row\">\n                        <div className=\"col s4\"></div>\n                        <div className=\"col s4\">Anger\n                            <span role=\"img\" aria-label=\"angry-face\">\n                            ðŸ˜ \n                            </span>\n                        </div>\n                        <div className=\"col s4\">{results.Anger}</div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col s4\"></div>\n                        <div className=\"col s4\">Disgust\n                            <span role=\"img\" aria-label=\"disgusted-face\">\n                            ðŸ˜–\n                            </span>\n                        </div>\n                        <div className=\"col s4\">{results.Disgust}</div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col s4\"></div>\n                        <div className=\"col s4\">Fear\n                            <span role=\"img\" aria-label=\"fearful-face\">\n                            ðŸ˜¨\n                            </span>\n                        </div>\n                        <div className=\"col s4\">{results.Fear}</div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col s4\"></div>\n                        <div className=\"col s4\">Joy\n                            <span role=\"img\" aria-label=\"joyful-face\">\n                            ðŸ˜„\n                            </span>\n                        </div>\n                        <div className=\"col s4\">{results.Joy}</div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col s4\"></div>\n                        <div className=\"col s4\">Sadness\n                            <span role=\"img\" aria-label=\"sad-face\">\n                            ðŸ˜¢\n                            </span>\n                        </div>\n                        <div className=\"col s4\">{results.Sadness}</div>\n                    </div>\n                </div>\n            )\n        } else if (type === \"Keyword\") {\n            return (\n                <div>\n                    {/* User Input */}\n                    <div className=\"row\">\n                        <div className=\"col s3\">Text</div>\n                        <div className=\"col s9\">{text}</div>\n                    </div>\n                    {/* Headings */}\n                    <div className=\"row\">\n                        <div className=\"col s3\">{type}s</div>\n                        <div className=\"col s3\">{type}</div>\n                        <div className=\"col s3\">Relevance</div>\n                        <div className=\"col s3\">Count</div>\n                    </div>\n                    {/* Results */}\n                    {results.map(res => \n                        <div className=\"row\" key={res.id}>\n                            <div className=\"col s3\"></div>\n                            <div className=\"col s3\">{res.Text}</div>\n                            <div className=\"col s3\">{res.Relevance}</div>\n                            <div className=\"col s3\">{res.Count}</div>\n                        </div>\n                    )}\n                </div>\n            )\n        } else if (type === \"Category\") {\n            return (\n                <div>\n                    {/* User Input */}\n                    <div className=\"row\">\n                        <div className=\"col s4\">Text</div>\n                        <div className=\"col s8\">{text}</div>\n                    </div>\n                    {/* Headings */}\n                    <div className=\"row\">\n                        <div className=\"col s4\">Categories</div>\n                        <div className=\"col s4\">{type}</div>\n                        <div className=\"col s4\">Score</div>\n                    </div>\n                    {/* Results */}\n                    {results.map(res => \n                        <div className=\"row\" key={res.id}>\n                            <div className=\"col s4\"></div>\n                            <div className=\"col s4\">{res.Label.substr(1)}</div>\n                            <div className=\"col s4\">{res.Score}</div>\n                        </div>\n                    )}\n                </div>\n            )\n        }\n    }\n\n    return (\n        <div>\n            {/* Display results from API request; if not defined, display message */}\n            <Title>Language Analyzer</Title>\n            {results \n                ? generateRows()\n                : (\n                    <div className=\"row\">\n                        <div className=\"col s12\">\n                            Sorry, no results were found for your search. Please try again!\n                        </div>\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n\nexport default Grid;","import React from 'react';\n\nconst Directions = ({ dirs }) => {\n    return dirs.map(dir => <h5 key={dir.id}>{dir.text}</h5>);\n}\n\nexport default Directions;","import React from 'react';\n\nconst TextInput = ({\n    name,\n    placeholder,\n    onChange\n}) => {\n    return (\n        <div>\n            <label htmlFor={name}>{placeholder}</label>\n            <textarea id={name} className=\"materialize-textarea\" onChange={onChange}></textarea>\n        </div>\n    )\n}\n\nexport default TextInput;","import React from 'react';\n\nconst DropDown = ({\n    name,\n    options,\n    onChange\n}) => {\n    return (\n        <div>\n            <label htmlFor={name}>Select method</label>\n            <select id={name} onChange={onChange} className='browser-default'>\n                {options.map(opt => <option value={opt.name} key={opt.id}>{opt.name}</option>)}\n            </select>\n            \n        </div>\n        \n    )\n}\n\nexport default DropDown;","import React from 'react';\n\nconst SubmitButton = ({ onClick }) => {\n    return (\n        <button\n            className=\"btn waves-effect waves-light\"\n            type=\"submit\" \n            name=\"action\"\n            onClick={onClick}>\n            <i className=\"material-icons right\">send</i>\n        </button>\n    )\n}\n\nexport default SubmitButton;","import { useState } from 'react';\n\nconst FormAction = cb => {\n    const [text, setText] = useState('');\n    const [select, setSelect] = useState('Keywords');\n\n    const handleInputChange = e => {\n        e.persist();\n        const { value } = e.target;\n        setText(value);\n    }\n\n    const handleSelectChange = e => {\n        e.persist();\n        const { value } = e.target;\n        setSelect(value);\n    }\n\n    const handleFormSubmit = e => {\n        if (e) e.preventDefault();\n        cb();\n        setText('');\n    }\n\n    return {\n        text,\n        select,\n        handleInputChange,\n        handleSelectChange,\n        handleFormSubmit\n    }\n}\n\nexport default FormAction;","import axios from 'axios';\n\nexport default {\n    getKeywords(request) {\n        return axios.post('http://localhost:1333/api/keywords', request);\n    },\n    getCategories(request) {\n        return axios.post('http://localhost:1333/api/categories', request);\n    },\n    getEmotions(request) {\n        return axios.post('http://localhost:1333/api/emotions', request);\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TextInput from '../TextInput';\nimport DropDown from '../DropDownSelect';\nimport Button from '../SubmitButton';\nimport FormAction from './FormAction';\nimport Home from '../../components/Home';\nimport API from '../../utils/API';\n\nconst Form = () => {\n    const {\n        text,\n        select,\n        handleInputChange,\n        handleSelectChange,\n        handleFormSubmit\n    } = FormAction(() => {\n        if (select === 'Keywords') {\n            API.getKeywords(text)\n            .then(res => {\n                const stats = {};\n                stats.results = res.data.Results;\n                let id = 1;\n                stats.results.forEach(res => {\n                    res.id = id;\n                    id++;\n                });\n                stats.type = \"Keyword\";\n                stats.text = text;\n                ReactDOM.render(<Home apiResults={stats}/>, document.getElementById('root'));\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        } else if (select === 'Categories') {\n            API.getCategories(text)\n            .then(res => {\n                const stats = {};\n                stats.results = res.data.Results;\n                let id = 1;\n                stats.results.forEach(res => {\n                    res.id = id;\n                    id++;\n                });\n                stats.type = \"Category\";\n                stats.text = text;\n                ReactDOM.render(<Home apiResults={stats}/>, document.getElementById('root'));\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        } else if (select === 'Emotions') {\n            API.getEmotions(text)\n            .then(res => {\n                const stats = {};\n                stats.results = res.data.Results;\n                stats.type = \"Emotion\";\n                stats.text = text;\n                ReactDOM.render(<Home apiResults={stats}/>, document.getElementById('root'));\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        }        \n    });\n\n    const options = [\n        {\n            \"name\": \"Keywords\",\n            \"id\": 1\n        },\n        {\n            \"name\": \"Categories\",\n            \"id\": 2\n        },\n        {\n            \"name\": \"Emotions\",\n            \"id\": 3\n        }\n    ];\n\n    return (\n        <form>\n            <div className=\"row\">\n                <TextInput\n                    name=\"text\"\n                    placeholder=\"Enter text to analyze\"\n                    value={text}\n                    onChange={handleInputChange} />\n            </div>\n            <div className=\"row\">\n                <DropDown\n                    name=\"select\"\n                    options={options}\n                    value={select}\n                    onChange={handleSelectChange} />\n                <Button onClick={handleFormSubmit} />\n            </div>\n        </form>\n    )\n}\n\nexport default Form;","import { useState, useEffect } from 'react';\n\nconst ResultsAction = apiResults => {\n    const [results, setResults] = useState([]);\n    const [type, setType] = useState('');\n    const [text, setText] = useState('');\n\n    useEffect(() => {\n        if (apiResults !== {}) {\n            setResults(apiResults.results);\n            setType(apiResults.type);\n            setText(apiResults.text);\n        }\n    }, []);\n\n    return {\n        results,\n        type,\n        text\n    }\n}\n\nexport default ResultsAction;","import React from 'react';\nimport Grid from '../../components/ResultsGrid';\nimport Title from '../../components/Title';\nimport Directions from '../../components/Directions';\nimport Form from '../../components/Form';\nimport ResultsAction from './ResultsAction';\n\nconst Home = ({ apiResults }) => {\n    const { results, type, text } = ResultsAction(apiResults);\n    const dirs = [\n        {\n            id: 1,\n            text: 'Enter text to analyze'\n        },\n        {\n            id: 2,\n            text: 'Select method'\n        },\n        {\n            id: 3,\n            text: 'Get results!'\n        }\n    ];\n\n    return (\n        <div className='container'>\n        {results ? (\n            <Grid type={type} text={text} results={results} />\n        ) : (\n            <div>\n                <Title>Language Analyzer</Title>\n                <Directions dirs={dirs} />\n                <Form />\n            </div>\n        )}\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return <Home apiResults={{}} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}